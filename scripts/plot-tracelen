#!/usr/bin/env python

# Copyright (c) 2016 Jonathan Anderson
# All rights reserved.
#
# This software was developed by BAE Systems, the University of Cambridge
# Computer Laboratory, and Memorial University under DARPA/AFRL contract
# FA8650-15-C-7558 ("CADETS"), as part of the DARPA Transparent Computing
# (TC) research program.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

import argparse
import os.path


args = argparse.ArgumentParser('plot trace file sizes vs input files')
args.add_argument('--bytes', help='Input sizes in bytes', action='store_true')
args.add_argument('tool', help='Name of the tool that processed the inputs')
args.add_argument('filename', nargs='+')

args = args.parse_args()

inputs, outputs = [], []

for name in args.filename:
    (base, ext) = os.path.splitext(name)

    if ext == '.trace':
        outputs.append(os.path.getsize(name))
    else:
        if base[-1].isalpha():
            size = int(base[:-1]) * {
                'k': 1024,
                'M': 1024 ** 2,
                'G': 1024 ** 3,
            }[base[-1]]

        else:
            size = int(base)

        inputs.append(size)


print('Read %d input and %d output sizes' % (len(inputs), len(outputs)))


import matplotlib.pyplot as plt
import numpy

from matplotlib.ticker import EngFormatter


fig, ax = plt.subplots()

plt.title('Trace sizes: %s' % args.tool)
plt.xscale('log')
plt.xlabel('Input size')
plt.yscale('log')
plt.ylabel('Trace size')

fmt = EngFormatter(unit = 'B', places = 0)
ax.xaxis.set_major_formatter(fmt)
ax.yaxis.set_major_formatter(fmt)

ax.plot(inputs, outputs, '-o')

plt.show()
