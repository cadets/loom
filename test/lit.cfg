# vim:syntax=python

import os
import sys

import lit


#
# Basic information about this test suite.
#
config.name = 'LOOM'
config.suffixes = [ '.c', '.cpp', '.ll' ]
config.excludes = [ 'Inputs' ]
config.test_format = lit.formats.ShTest()

#
# Useful environment variables.
#
# This variables are optional when LOOM is installed to a standard location;
# if not, failure to set these variables will cause tests to fail building.
#
extra_cflags = [ '-g' ]     # always build tests with debug symbols
extra_cxxflags = [ '-g' ]
libdirs = []
extra_libs = []


if 'output_dir' in lit_config.params:
	config.test_exec_root = lit_config.params['output_dir']


#
# Find the 'test_support' module (which may not be in the current PYTHONPATH).
#
loom_src = os.getenv('LOOM_SOURCE_DIR')
if not loom_src:
	if not 'source_dir' in lit_config.params:
		raise Exception, ('Unable to find LOOM source directory.'
			+ ' Set LOOM_SOURCE_DIR or pass'
                        + ' --param=source_dir=path/to/src to lit')

	loom_src = lit_config.params['source_dir']

sys.path.append(os.curdir)
if loom_src: sys.path.append(os.path.join(loom_src, 'test'))

try:
	import test_support as test

except ImportError, e:
	print("Unable to find 'test_support' module in:\n[")
	for p in sys.path:
		print("  %s" % p)
	print("]")
	sys.exit(1)


#
# Find LLVM tools (e.g. FileCheck).
#
llvm_obj_root = test.llvm_config['obj-root']
llvm_tools = os.path.join(llvm_obj_root, 'bin')


#
# Find instrumentation library.
#
loom_build = os.getenv('LOOM_BUILD_DIR')
if not loom_build:
	if not 'build_dir' in lit_config.params:
		raise Exception, ('Unable to find LOOM build directory;' +
			' set LOOM_BUILD_DIR or pass --build_dir to lit')

	loom_build = lit_config.params['build_dir']

lib = test.find_library(test.libname('LLVMLoom', loadable_module = True),
	[ os.path.join(loom_build, 'lib') ])


#
# Set variables that we can access from lit RUN lines.
#
config.substitutions += [
	# Tools:
	('%cpp', test.which([ 'clang-cpp38', 'clang-cpp', 'cpp' ])),
	('%clang', test.which([ 'clang38', 'clang' ])),
	('%clang', test.which([ 'clang38', 'clang' ])),
	('%llc', test.which([ 'llc38', 'llc' ])),
	('%filecheck', test.which([ 'FileCheck38', 'FileCheck' ])),
	('%loom', '%s -load %s' % (test.which([ 'opt38', 'opt' ]), lib)),

	# Flags:
	('%cflags', test.cflags([ '%p/Inputs' ], extra = extra_cflags)),
	('%cxxflags', test.cflags([ '%p/Inputs' ], extra = extra_cxxflags)),
	('%ldflags', test.ldflags(libdirs, [ 'loom' ], extra_libs)),
	('%cpp_out', test.cpp_out()),
]




config.environment['PATH'] = os.path.pathsep.join([
	llvm_tools,
	config.environment['PATH']
])
